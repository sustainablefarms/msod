model{
  # site level random effects
  tau.occ.re <- pow(sigma.occ.re,-2)
  sigma.occ.re ~ dunif(0,10)
  
  tau.det.re <- pow(sigma.det.re,-2)
  sigma.det.re ~ dunif(0,10)
  

  # community priors for occupancy covariates
  for(m in 1:noccvar) {
    mu.occ.b[m] ~ dnorm(0, 0.01)T(-10,10)
    tau.occ.b[m] <- pow(sigma.occ.b[m], -2)
    sigma.occ.b[m] ~ dunif(0, 10)
  }

  # community priors for detection covariates
  for(m in 1:nobsvar) {
    mu.det.b[m] ~ dnorm(0, 0.01)T(-10,10)
    tau.det.b[m] <- pow(sigma.det.b[m], -2)
    sigma.det.b[m] ~ dunif(0, 10)
  }

  # Latent variables
  for(j in 1:nmodelsites) {
        for(l in 1:nlv){
              lv.v[j,l] ~ dnorm(0,1)
        }
  }

  # Latent variable coefficients with constraints
  # diagonal elements positive, upper diagonal 0
  for(l in 1:(nlv-1)){
        for(l2 in (l+1):nlv){
             lv.b[l,l2] <- 0
        }
  }

   # Sign constraints on diagonal elements
   for(l in 1:nlv) {
         lv.b[l,l]  ~ dunif(0,1) 
   }

  # lower diagonal free
  for(l in 2:nlv){
        for(l2 in 1:(l-1)){
             lv.b[l,l2] ~ dunif(-1,1)
        }
  }

  # other elements free
  for(i in (nlv+1):nspecies) {
        for(l in 1:nlv){
              lv.b[i,l] ~ dunif(-1,1)
        }
  }

  # setup site level random effects
  
  for (j in 1:nmodelsites) {
    occ.re[j] ~ dnorm(0, tau.occ.re)T(-10,10)
    det.re[j] ~ dnorm(0, tau.det.re)T(-10,10)
  }
  # loop over all species
  for (i in 1:(nspecies)) {


    # random effects for occupancy
    for(m in 1:noccvar) {
      occ.b[i, m] ~ dnorm(mu.occ.b[m], tau.occ.b[m])T(-10,10)
    }

    # random effects for detection
    for(m in 1:nobsvar) {
      det.b[i, m] ~ dnorm(mu.det.b[m], tau.det.b[m])T(-10,10)
    }
    
    # loop over all sites to give occupancy
    for (j in 1:nmodelsites) {

      # probit model for occupancy
      eta[j,i] <-  occ.re[SiteOccInd[j]] + inprod(occ.b[i, ], Xocc[j, ]) + inprod(lv.b[i,],lv.v[j, ])
      # draw from normal, constrain variance to 1
      occ.indicator[j,i] ~ dnorm(eta[j,i],1/(1-sum(lv.b[i,1:nlv]^2))) 
      occ.v[j,i] <- step(occ.indicator[j,i])
   }
   
   # apply occupancy probabilities to detection
   for (l in 1:nvisits) {
      # logistic model for detection
      logit(p[l,i]) <-   det.re[SiteObsInd[l]] + inprod(det.b[i, ], Xobs[l, ])
      mu.p[l,i] <- p[l,i]*occ.v[ModelSite[l],i]
      y[l,i] ~ dbern(mu.p[l,i])
   } # l Vvisits
  } #i species
     
}
    
